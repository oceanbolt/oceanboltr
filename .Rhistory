},
{
"date":"2020-12-06",
"avgSpeed":11.201117515563965
},
{
"date":"2020-12-07",
"avgSpeed":11.202298164367676
}
]
}'
x
fromJSON(x)
fromJSON(x)[["tonnageZoneCounts"]]
setDT(fromJSON(x)[["tonnageZoneCounts"]])
y <- setDT(fromJSON(x)[["tonnageZoneCounts"]])
y
str(y)
range(y$avgSpeed)
range(y$date)
output
listSegments()
response <- POST(
paste0(baseUrl, "/tonnage/speed"),
add_headers(Authorization = paste0("Bearer ", token)),
body = list(
zoneId = c(),
segment = c("shortsea"),
subSegment = c("panamax", "kamsarmax", "post_panamax"),
direction = c(),
ladenStatus = c(),
excludeMpv = TRUE,
format = "json"
),
encode = "json"
)
response
if (http_error(response)) {
err <- content(response,
as = "parsed", type = "application/json",
encoding = "utf8"
)
stop(sprintf("Failed with error %d - %s", err$code, err$message))
}
listSegments()
zoneId = c(),
segment = c(),
subSegment = c(""shortsea"), #c("panamax", "kamsarmax", "post_panamax"),
direction = c(),
ladenStatus = c(),
excludeMpv = TRUE,
format = "json"
),
encode = "json"
)
if (http_error(response)) {
err <- content(response,
as = "parsed", type = "application/json",
encoding = "utf8"
)
stop(sprintf("Failed with error %d - %s", err$code, err$message))
}
parsed <- content(response,
as = "text", type = "application/json",
encoding = "utf8"
)
output <- setDT(fromJSON(parsed)[["tonnageZoneCounts"]])
return(output)
}
# Queries API
response <- POST(
paste0(baseUrl, "/tonnage/speed"),
add_headers(Authorization = paste0("Bearer ", token)),
body = list(
zoneId = c(),
segment = c(),
subSegment = c("shortsea"), #c("panamax", "kamsarmax", "post_panamax"),
direction = c(),
ladenStatus = c(),
excludeMpv = TRUE,
format = "json"
),
encode = "json"
)
if (http_error(response)) {
err <- content(response,
as = "parsed", type = "application/json",
encoding = "utf8"
)
stop(sprintf("Failed with error %d - %s", err$code, err$message))
}
parsed <- content(response,
as = "text", type = "application/json",
encoding = "utf8"
)
output <- setDT(fromJSON(parsed)[["tonnageZoneCounts"]])
output
listSegments()
response <- POST(
paste0(baseUrl, "/tonnage/speed"),
add_headers(Authorization = paste0("Bearer ", token)),
body = list(
zoneId = c(),
segment = c("handysize"),
subSegment = c("panamax", "kamsarmax", "post_panamax"),
direction = c(),
ladenStatus = c(),
excludeMpv = TRUE,
format = "json"
),
encode = "json"
)
response
if (http_error(response)) {
err <- content(response,
as = "parsed", type = "application/json",
encoding = "utf8"
)
stop(sprintf("Failed with error %d - %s", err$code, err$message))
}
parsed <- content(response,
as = "text", type = "application/json",
encoding = "utf8"
)
output <- setDT(fromJSON(parsed)[["tonnageZoneCounts"]])
output
response
listSegments()
response <- POST(
paste0(baseUrl, "/tonnage/speed"),
add_headers(Authorization = paste0("Bearer ", token)),
body = list(
zoneId = c(),
segment = c("handysize"),
subSegment = c("panamax", "kamsarmax", "post_panamax", "large_handysize"),
direction = c(),
ladenStatus = c(),
excludeMpv = TRUE,
format = "json"
),
encode = "json"
)
if (http_error(response)) {
err <- content(response,
as = "parsed", type = "application/json",
encoding = "utf8"
)
stop(sprintf("Failed with error %d - %s", err$code, err$message))
}
parsed <- content(response,
as = "text", type = "application/json",
encoding = "utf8"
)
output <- setDT(fromJSON(parsed)[["tonnageZoneCounts"]])
output
output
response <- POST(
paste0(baseUrl, "/tonnage/speed"),
add_headers(Authorization = paste0("Bearer ", token)),
body = list(
zoneId = c(),
segment = c("handysize"),
subSegment = c("panamax", "kamsarmax", "post_panamax"),
direction = c(),
ladenStatus = c(),
excludeMpv = TRUE,
format = "json"
),
encode = "json"
)
if (http_error(response)) {
err <- content(response,
as = "parsed", type = "application/json",
encoding = "utf8"
)
stop(sprintf("Failed with error %d - %s", err$code, err$message))
}
parsed <- content(response,
as = "text", type = "application/json",
encoding = "utf8"
)
output <- setDT(fromJSON(parsed)[["tonnageZoneCounts"]])
output
# Queries API
response <- POST(
paste0(baseUrl, "/tonnage/speed"),
add_headers(Authorization = paste0("Bearer ", token)),
body = list(
zoneId = c(),
segment = c(),
subSegment = c("panamax", "kamsarmax", "post_panamax"),
direction = c(),
ladenStatus = c("laden", "ballast"),
excludeMpv = TRUE,
format = "json"
),
encode = "json"
)
response
if (http_error(response)) {
err <- content(response,
as = "parsed", type = "application/json",
encoding = "utf8"
)
stop(sprintf("Failed with error %d - %s", err$code, err$message))
}
parsed <- content(response,
as = "text", type = "application/json",
encoding = "utf8"
)
output <- setDT(fromJSON(parsed)[["tonnageZoneCounts"]])
output
plot(output$avgSpeed)
plot(output$avgSpeed, type = "l")
plot(y = output$avgSpeed, type = "l")
plot(output$date, output$avgSpeed, type = "l")
plot
plot(output$date, output$avgSpeed, type = "l")
output$date
str(output$date)
aas.Date(output$date)
as.Date(output$date)
str(output)
output[, date := as.Date(date)]
plot(output$date, output$avgSpeed, type = "l")
str(output)
listZones()
# Queries API
response <- POST(
paste0(baseUrl, "/tonnage/speed"),
add_headers(Authorization = paste0("Bearer ", token)),
body = list(
zoneId = c(),
segment = c(),
subSegment = c("panamax", "kamsarmax", "post_panamax"),
direction = c(),
ladenStatus = c("laden", "ballast"),
excludeMpv = TRUE,
format = "csv"
),
encode = "json"
)
if (http_error(response)) {
err <- content(response,
as = "parsed", type = "application/json",
encoding = "utf8"
)
stop(sprintf("Failed with error %d - %s", err$code, err$message))
}
response <- POST(
paste0(baseUrl, "/tonnage/speed"),
add_headers(Authorization = paste0("Bearer ", token)),
body = list(
zoneId = c(),
segment = c("shortsea"),
subSegment = c(),
direction = c(),
ladenStatus = c("laden", "ballast"),
excludeMpv = TRUE,
format = "csv"
),
encode = "json"
)
if (http_error(response)) {
err <- content(response,
as = "parsed", type = "application/json",
encoding = "utf8"
)
stop(sprintf("Failed with error %d - %s", err$code, err$message))
}
response <- POST(
paste0(baseUrl, "/tonnage/speed"),
add_headers(Authorization = paste0("Bearer ", token)),
body = list(
zoneId = c(),
segment = c(),
subSegment = c("shortsea"),
direction = c(),
ladenStatus = c("laden", "ballast"),
excludeMpv = TRUE,
format = "csv"
),
encode = "json"
)
if (http_error(response)) {
err <- content(response,
as = "parsed", type = "application/json",
encoding = "utf8"
)
stop(sprintf("Failed with error %d - %s", err$code, err$message))
}
parsed <- content(response,
as = "text", type = "application/json",
encoding = "utf8"
)
output <- setDT(fromJSON(parsed)[["tonnageZoneCounts"]])
output[, date := as.Date(date)]
output
response <- POST(
paste0(baseUrl, "/tonnage/speed"),
add_headers(Authorization = paste0("Bearer ", token)),
body = list(
zoneId = c(),
segment = c(),
subSegment = c("shortsea"),
direction = c(),
ladenStatus = c("laden", "ballast"),
excludeMpv = TRUE,
format = "csv"
),
encode = "json"
)
if (http_error(response)) {
err <- content(response,
as = "parsed", type = "application/json",
encoding = "utf8"
)
stop(sprintf("Failed with error %d - %s", err$code, err$message))
}
parsed <- content(response,
as = "text", type = "application/json",
encoding = "utf8"
)
output <- setDT(fromJSON(parsed)[["tonnageZoneCounts"]])
output
response
response <- POST(
paste0(baseUrl, "/tonnage/speed"),
add_headers(Authorization = paste0("Bearer ", token)),
body = list(
zoneId = c(),
segment = c(),
subSegment = c("shortsea"),
direction = c(),
ladenStatus = c("laden", "ballast"),
excludeMpv = TRUE,
format = "json"
),
encode = "json"
)
if (http_error(response)) {
err <- content(response,
as = "parsed", type = "application/json",
encoding = "utf8"
)
stop(sprintf("Failed with error %d - %s", err$code, err$message))
}
parsed <- content(response,
as = "text", type = "application/json",
encoding = "utf8"
)
output <- setDT(fromJSON(parsed)[["tonnageZoneCounts"]])
output[, date := as.Date(date)] # check 0 rows
output
response <- POST(
paste0(baseUrl, "/tonnage/speed"),
add_headers(Authorization = paste0("Bearer ", token)),
body = list(
zoneId = c(),
segment = c("handysize"),
subSegment = c("panamax", "kamsarmax", "post_panamax"),
direction = c(),
ladenStatus = c("laden", "ballast"),
excludeMpv = TRUE,
format = "json"
),
encode = "json"
)
response
if (http_error(response)) {
err <- content(response,
as = "parsed", type = "application/json",
encoding = "utf8"
)
stop(sprintf("Failed with error %d - %s", err$code, err$message))
}
parsed <- content(response,
as = "text", type = "application/json",
encoding = "utf8"
)
output <- setDT(fromJSON(parsed)[["tonnageZoneCounts"]])
output[, date := as.Date(date)] # check 0 rows
output
devtools::document()
devtools::document()
devtools::document()
response <- POST(
paste0(baseUrl, "/tonnage/speed"),
add_headers(Authorization = paste0("Bearer ", token)),
body = list(
zoneId = c(),
segment = c("handysize"),
subSegment = c("panamax", "kamsarmax", "post_panamax"),
direction = c(),
ladenStatus = c("laden", "ballast"),
excludeMpv = TRUE,
format = "json"
),
encode = "json"
)
baseUrl <- getOption("oceanbolt.base_url")
token <- getOption("oceanbolt.token")
baseUrl
token
registerToken(scan("../docs/token.key", what = "character"), type = "keyring")
registerToken
requireNamespace("keyring", quietly = TRUE)
token
keyring::key_set_with_value("oceanbolt", password = token)
getOption("oceanbolt.token")
token <- getOption("oceanbolt.token")
keyring::key_set_with_value("oceanbolt", password = token)
keyring::backend_secret_service
kb <- keyring::backend_secret_service
?keyring::backend_secret_service
kb <- keyring::backend_secret_service$new()
kb$is_available()
kb$is_available
kb$is_available(T)
kb$is_available(T)
kb <- keyring::backend_secret_service$new()
kb$is_available(T)
kb$is_available(T)
kb <- keyring::backend_secret_service$new()
kb$is_available(T)
# Checks options
baseUrl <- getOption("oceanbolt.base_url")
token <- getOption("oceanbolt.token")
baseUrl
token
response <- POST(
paste0(baseUrl, "/tonnage/speed"),
add_headers(Authorization = paste0("Bearer ", token)),
body = list(
zoneId = c(),
segment = c("handysize"),
subSegment = c("panamax", "kamsarmax", "post_panamax"),
direction = c(),
ladenStatus = c("laden", "ballast"),
excludeMpv = TRUE,
format = "json"
),
encode = "json"
)
response
http_error(response)
parsed <- content(response,
as = "text", type = "application/json",
encoding = "utf8"
)
output <- setDT(fromJSON(parsed)[["tonnageZoneCounts"]])
if (nrow(output) > 0) {
output[, date := as.Date(date)]
}
output
response <- POST(
paste0(baseUrl, "/tonnage/speed"),
add_headers(Authorization = paste0("Bearer ", token)),
body = list(
zoneId = c(),
segment = c(),
subSegment = c("panamax", "kamsarmax", "post_panamax"),
direction = c(),
ladenStatus = c("laden", "ballast"),
excludeMpv = TRUE,
format = "json"
),
encode = "json"
)
if (http_error(response)) {
err <- content(response,
as = "parsed", type = "application/json",
encoding = "utf8"
)
stop(sprintf("Failed with error %d - %s", err$code, err$message))
}
parsed <- content(response,
as = "text", type = "application/json",
encoding = "utf8"
)
output <- setDT(fromJSON(parsed)[["tonnageZoneCounts"]])
if (nrow(output) > 0) {
output[, date := as.Date(date)]
}
output
response <- POST(
paste0(baseUrl, "/tonnage/speed"),
add_headers(Authorization = paste0("Bearer ", token)),
body = list(
zoneId = c(),
segment = c(),
subSegment = c("panamax", "kamsarmax", "post_panamax"),
direction = c(),
ladenStatus = c("laden", "ballast"),
excludeMpv = TRUE,
format = "csv"
),
encode = "json"
)
response
parsed <- content(response,
as = "text", type = "application/json",
encoding = "utf8"
)
parsed
fromJSON(parsed)
fromJSON(parsed)$csv
fread(fromJSON(parsed)$csv)
data.table::fread(fromJSON(parsed)$csv)
x <- data.table::fread(fromJSON(parsed)$csv)
str(x)
?listSegments
