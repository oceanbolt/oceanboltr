stop(sprintf("Failed with error %d - %s", err$code, err$message))
}
parsed <- content(response,
as = "text", type = "application/json",
encoding = "utf8"
)
output <- setDT(fromJSON(parsed)[["tonnageZoneCounts"]])
output
response
response <- POST(
paste0(baseUrl, "/tonnage/speed"),
add_headers(Authorization = paste0("Bearer ", token)),
body = list(
zoneId = c(),
segment = c(),
subSegment = c("shortsea"),
direction = c(),
ladenStatus = c("laden", "ballast"),
excludeMpv = TRUE,
format = "json"
),
encode = "json"
)
if (http_error(response)) {
err <- content(response,
as = "parsed", type = "application/json",
encoding = "utf8"
)
stop(sprintf("Failed with error %d - %s", err$code, err$message))
}
parsed <- content(response,
as = "text", type = "application/json",
encoding = "utf8"
)
output <- setDT(fromJSON(parsed)[["tonnageZoneCounts"]])
output[, date := as.Date(date)] # check 0 rows
output
response <- POST(
paste0(baseUrl, "/tonnage/speed"),
add_headers(Authorization = paste0("Bearer ", token)),
body = list(
zoneId = c(),
segment = c("handysize"),
subSegment = c("panamax", "kamsarmax", "post_panamax"),
direction = c(),
ladenStatus = c("laden", "ballast"),
excludeMpv = TRUE,
format = "json"
),
encode = "json"
)
response
if (http_error(response)) {
err <- content(response,
as = "parsed", type = "application/json",
encoding = "utf8"
)
stop(sprintf("Failed with error %d - %s", err$code, err$message))
}
parsed <- content(response,
as = "text", type = "application/json",
encoding = "utf8"
)
output <- setDT(fromJSON(parsed)[["tonnageZoneCounts"]])
output[, date := as.Date(date)] # check 0 rows
output
devtools::document()
devtools::document()
devtools::document()
response <- POST(
paste0(baseUrl, "/tonnage/speed"),
add_headers(Authorization = paste0("Bearer ", token)),
body = list(
zoneId = c(),
segment = c("handysize"),
subSegment = c("panamax", "kamsarmax", "post_panamax"),
direction = c(),
ladenStatus = c("laden", "ballast"),
excludeMpv = TRUE,
format = "json"
),
encode = "json"
)
baseUrl <- getOption("oceanbolt.base_url")
token <- getOption("oceanbolt.token")
baseUrl
token
registerToken(scan("../docs/token.key", what = "character"), type = "keyring")
registerToken
requireNamespace("keyring", quietly = TRUE)
token
keyring::key_set_with_value("oceanbolt", password = token)
getOption("oceanbolt.token")
token <- getOption("oceanbolt.token")
keyring::key_set_with_value("oceanbolt", password = token)
keyring::backend_secret_service
kb <- keyring::backend_secret_service
?keyring::backend_secret_service
kb <- keyring::backend_secret_service$new()
kb$is_available()
kb$is_available
kb$is_available(T)
kb$is_available(T)
kb <- keyring::backend_secret_service$new()
kb$is_available(T)
kb$is_available(T)
kb <- keyring::backend_secret_service$new()
kb$is_available(T)
# Checks options
baseUrl <- getOption("oceanbolt.base_url")
token <- getOption("oceanbolt.token")
baseUrl
token
response <- POST(
paste0(baseUrl, "/tonnage/speed"),
add_headers(Authorization = paste0("Bearer ", token)),
body = list(
zoneId = c(),
segment = c("handysize"),
subSegment = c("panamax", "kamsarmax", "post_panamax"),
direction = c(),
ladenStatus = c("laden", "ballast"),
excludeMpv = TRUE,
format = "json"
),
encode = "json"
)
response
http_error(response)
parsed <- content(response,
as = "text", type = "application/json",
encoding = "utf8"
)
output <- setDT(fromJSON(parsed)[["tonnageZoneCounts"]])
if (nrow(output) > 0) {
output[, date := as.Date(date)]
}
output
response <- POST(
paste0(baseUrl, "/tonnage/speed"),
add_headers(Authorization = paste0("Bearer ", token)),
body = list(
zoneId = c(),
segment = c(),
subSegment = c("panamax", "kamsarmax", "post_panamax"),
direction = c(),
ladenStatus = c("laden", "ballast"),
excludeMpv = TRUE,
format = "json"
),
encode = "json"
)
if (http_error(response)) {
err <- content(response,
as = "parsed", type = "application/json",
encoding = "utf8"
)
stop(sprintf("Failed with error %d - %s", err$code, err$message))
}
parsed <- content(response,
as = "text", type = "application/json",
encoding = "utf8"
)
output <- setDT(fromJSON(parsed)[["tonnageZoneCounts"]])
if (nrow(output) > 0) {
output[, date := as.Date(date)]
}
output
response <- POST(
paste0(baseUrl, "/tonnage/speed"),
add_headers(Authorization = paste0("Bearer ", token)),
body = list(
zoneId = c(),
segment = c(),
subSegment = c("panamax", "kamsarmax", "post_panamax"),
direction = c(),
ladenStatus = c("laden", "ballast"),
excludeMpv = TRUE,
format = "csv"
),
encode = "json"
)
response
parsed <- content(response,
as = "text", type = "application/json",
encoding = "utf8"
)
parsed
fromJSON(parsed)
fromJSON(parsed)$csv
fread(fromJSON(parsed)$csv)
data.table::fread(fromJSON(parsed)$csv)
x <- data.table::fread(fromJSON(parsed)$csv)
str(x)
?listSegments
library(oceanboltr)
listSegments()
registerToken(scan("../docs/token.key", what = "character"), type = "keyring")
listSegments()
listSegments()
library(oceanboltr)
listSegments()
registerToken(scan("../docs/token.key", what = "character"), type = "keyring")
use_version
usethis::use_version
usethis::use_version()
usethis::use_spell_check()
install.packages("spelling")
usethis::use_spell_check()
devtools::check()
packageVersion("spelling")
library(oceanboltr)
devtools::check()
spelling::spell_check_test(vignettes = TRUE, error = FALSE,
skip_on_cran = TRUE)
spelling::spell_check_test(vignettes = TRUE, error = TRUE, skip_on_cran = TRUE)
spelling::spell_check_test
spelling::spell_check_package()
use_news_md()
usethis::use_news_md()
usethis::use_news_md()
devtools::check()
library(oceanboltr)
library(covr)
covr::codecov()
use_coverage()
usethis::use_coverage()
usethis::use_coverage()
usethis::git_vaccinate()
usethis::use_testthat()
usethis::use_test()
?usethis::use_test
usethis::use_test()
usethis::use_test()
usethis::use_test()
usethis::use_test()
usethis::use_test()
usethis::use_test()
usethis::use_test()
usethis::use_test()
usethis::use_test()
usethis::use_test()
usethis::use_test()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
spelling::update_wordlist()
devtools::check()
styler::style_pkg()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
`:=`
assign(`:=`, NULL)
covr::codecov()
listCountries()
expect_identical(names(listCountries()), c("country", "countryCode"))
library(oceanboltr)
devtools::test()
devtools::test()
registerToken(scan("../docs/token.key", what = "character"), type = "keyring")
devtools::test()
listCountries()
class(listCountries())
expect_named(listCountries(), c("country", "countryCode"))
class(listCountries())c("country", "countryCode")
expect_named(listCountries(), c("country", "countryCode"))
expect_named(listCountries(), c("country", "countryCode")) -> x
x
expect_named(listCountries()) -> x
x
expect_match(class(listCountries()), "data.table")
expect_true("data.table" %i% class(listCountries()))
expect_true("data.table" %in% class(listCountries()))
devtools::test()
expect_true(nrow(listCountries()) > 0)
devtools::test()
listCommodities()
expect_named(listCommodities(), c("commodity", "commodityValue",
"commodityGroup", "commodityId"))
devtools::test()
listRegions()
devtools::test()
listZones()
expect_named(listZones(), c("zoneId", "zoneName"))
expect_named(listZones(), c("zoneId", "zoneNamed"))
expect_named(listZones(), c("zoneName", "zoneId"))
expect_named(listZones(), c("zoneId", "zoneName"))
names(listZones())
names(listZones()) %in% c("zoneName", "zoneId")
all(names(listZones()) %in% c("zoneName", "zoneId"))
expect_true(all(names(listZones()) %in% c("zoneId", "zoneName")))
expect_true(all(names(listCommodities()) %in% c("commodity",
"commodityValue",
"commodityGroup",
"commodityId")))
expect_true(all(names(listCountries()) %in% c("country", "countryCode")))
usethis::use_test()
names(listSegments()
)
names(listSegments())
listSegments()
expect_true(all(names(listSegments()) %in% c("segment",
"subSegment",
"segmentInt",
"subSegmentInt",
"subSegmentKey",
"segmentKey",
"cutoffHigh",
"cutoffLow")))
devtools::test()
listEntities
listEntities()
expect_error(listEntities())
listEntities()
listEntities()
listEntities("reports")
expect_error(listEntities("reports"))
devtools::test()
library(oceanboltr)
expect_warning(listEntities(c("countries", "regions"))
})
listEntities(c("countries", "regions"))
oceanboltr:::listEntities(c("countries", "regions"))
library(oceanboltr)
oceanboltr:::listEntities(c("countries", "regions"))
library(oceanboltr)
oceanboltr:::listEntities(c("countries", "regions"))
devtools::test()
expect_error({
options("oceanbolt.base_url" = NULL)
})
expect_error({
options("oceanbolt.base_url" = NULL)
listEntities("countries")
})
devtools::test()
library(oceanboltr)
devtools::test()
library(oceanboltr)
devtools::test()
devtools::test()
devtools::test()
.GlobalEnv
ls(.GlobalEnv)
Sys.getenv()
Sys.getenv()
listCountries()
library(oceanboltr)
listCountries()
library(oceanboltr)
listCountries()
library(oceanboltr)
ls(.GlobalEnv)
environment()
search()
as.environment("package:oceanbolt")
as.environment("package:oceanboltr")
ls(as.environment("package:oceanboltr"))
library(oceanboltr)
ls(as.environment("package:oceanboltr"))
library(oceanboltr)
listEntities()
oceanboltr:::listEntities()
oceanboltApiUrl
library(oceanboltr)
devtools::check()
registerToken(scan("../docs/token.key", what = "character"), type = "keyring")
devtools::check()
devtools::test()
listCountries()
covr::codecov()
listZones()
listZones()$zoneId
getFleetSpeed9
getFleetSpeed()
library(oceanboltr)
getFleetSpeed()
getFleetSpeed()
paste0(baseApiUrl, "/tonnage/speed")
add_headers(Authorization = paste0("Bearer ", token))
list(
zoneId = zoneId,
subSegment = selectedSubSegments,
direction = direction,
ladenStatus = ladenStatus,
excludeMpv = excludeMpv,
format = "json"
)
selectedSubSegments
selectedSubSegments$subSegmentKey
library(oceanboltr)
getFleetSpeed()
library(oceanboltr)
getFleetSpeed()
list(
zoneId = zoneId,
subSegment = selectedSubSegments,
direction = direction,
ladenStatus = ladenStatus,
excludeMpv = excludeMpv,
format = "json"
)
response
selectedSubSegments
library(oceanboltr)
getFleetSpeed()
getFleetSpeed()
list(
zoneId = zoneId,
subSegment = selectedSubSegments,
direction = direction,
ladenStatus = ladenStatus,
portStatus = portStatus,
excludeMpv = excludeMpv,
format = "json"
)
library(oceanboltr)
getFleetSpeed()
list(
zoneId = zoneId,
subSegment = selectedSubSegments,
direction = direction,
ladenStatus = ladenStatus,
portStatus = portStatus,
excludeMpv = excludeMpv,
format = "json"
)
output
parsed
fromJSON(parsed)
setDT(fromJSON(parsed)[["fleetSpeedData"]])
output <- setDT(fromJSON(parsed)[["fleetSpeedData"]])
if (nrow(output) > 0) {
output[, date := as.Date(date)]
}
output[, date := as.Date(date)]
library(oceanboltr)
getFleetSpeed()
getFleetSpeed(zoneId = NULL)
getFleetSpeed(zoneId = NA)
covr::code_coverage()
devtools::check()
registerToken(scan("../docs/token.key", what = "character"), type = "keyring")
devtools::check()
devtools::check()
covr::code_coverage()
?covr::code_coverage
covr::package_coverage()
covr::package_coverage()
registerToken(scan("../docs/token.key", what = "character"), type = "keyring")
oceanboltr::registerToken(scan("../docs/token.key", what = "character"), type = "keyring")
covr::package_coverage()
library(oceanboltr)
covr::package_coverage()
getOptions("oceanbolt.token")
getOption("oceanbolt.token")
getOption("oceanbolt.token")
getOption("oceanbolt.token")
listEntities("countries")
class(listEntities("countries"))
getOption("oceanbolt.token")
covr::package_coverage()
listZones()
getOption("oceanbolt.token")
registerToken(scan("../docs/token.key", what = "character"), type = "keyring")
covr::package_coverage()
registerToken(scan("../docs/token.key", what = "character"), type = "keyring")
covr::package_coverage()
getOption("oceanbolt.token")
covr::package_coverage()
listRegions()
all(names(listRegions()) %in% c("regionId", "regionName"))
"data.table" %in% class(listRegions())
nrow(listRegions()) > 0
?covr::package_coverage
covr::package_coverage()
getOption("oceanbolt.token")
Sys.getenv()
keyring::key_list("OCEANBOLT_TOKEN")
devtools::document()
devtools::document()
devtools::check()
?listCommodities
devtools::document()
devtools::document()
devtools::check()
library(oceanboltr)
Sys.getenv("OCEANBOLT_TOKEN")
registerToken(scan("../docs/token.key", what = "character"), type = "keyring")
Sys.getenv("OCEANBOLT_TOKEN")
?Sys.getenv
covr::package_coverage()
library(oceanboltr)
covr::package_coverage()
lintr::lint_package()
styler::style_pkg()
spelling::spell_check_test(
vignettes = TRUE, error = FALSE,
skip_on_cran = TRUE
)
spelling::spell_check_test(
vignettes = TRUE,
error = FALSE,
skip_on_cran = TRUE
)
devtools::check()
covr::codecov()
Sys.setenv("CODECOV_TOKEN"="676c679f-507c-41c2-a698-8e74ad6de99f")
covr::codecov()
covr::package_coverage()
